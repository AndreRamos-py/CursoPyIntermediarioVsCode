---------------------------------------------------------------------------------------------------------
Pode-se usar *args para fazer o empacotamento de itens, quando por exemplo em um print teremos
muitos valores e desejamos que a partir de tal valor, o resto seja empacotado. Usando essa função
o itens empacotados ficaram em uma lista.
---------------------------------------------------------------------------------------------------------
Dicionários são estruturas de dados do tipo par de "chave" e "valor".
# Chaves podem ser consideradas como o "índice" que vimos na lista e podem ser de tipos imutáveis como:
str, int, float, bool, tuple, etc.
O valor pode ser de qualquer tipo, incluindo outro dicionário. Usamos as chaves - {} - ou a classe dict
para criar dicionários.
# Imutáveis: str, int, float, bool, tuple
# Mutável: dict, list
---------------------------------------------------------------------------------------------------------
Métodos úteis dos dicionários em Python:
# len - quantas chaves
# keys - iterável com as chaves
# values - iterável com os valores
# items - iterável com chaves e valores
# setdefault - adiciona valor se a chave não existe
# copy - retorna uma cópia rasa (shallow copy) - Nesse caso por exemplo, ele não copia valores mutaveis,
ao chamar o conteudo dict em outra variavel e mesmo com o copy, alterar um valor mutavel, a alteração
ocorrerá tanto no dict original quanto na copia. Para que isso não aconteça temos a função Deepcopy
importada de import copy.
# Deepcopy - Faz uma copia completa, incluindo valores mutaveis
# get - obtém uma chave
# pop - Apaga um item com a chave especificada (del)
# popitem - Apaga o último item adicionado
# update - Atualiza um dicionário com outro
---------------------------------------------------------------------------------------------------------
Sets - Conjuntos em Python (tipo set)  #UMA SACOLA QUE VAI JOGANDO AS COISAS E ELAS FICAM DESORGANIZADAS
# Sets em Python são mutáveis, porém aceitam apenas tipos imutáveis como valor interno.
# Sets são eficientes para remover valores duplicados de iteráveis.
# - Não aceitam valores mutáveis
# - Seus valores serão sempre únicos;
# - não tem índexes;
# - não garantem ordem;
# - são iteráveis (for, in, not in)

Métodos úteis:
# add, update, clear, discard

Operadores úteis:
# união: | união (union) - Une
# intersecção: & (intersection) - Itens presentes em ambos
# diferença: - Itens presentes apenas no set da esquerda
# diferença simétrica: ^ - Itens que não estão em ambos
---------------------------------------------------------------------------------------------------------
A função lambda é uma função como qualquer outra em Python. Porém, são funções anônimas que contém apenas
uma linha. Ou seja, tudo deve ser contido dentro de uma única expressão.
---------------------------------------------------------------------------------------------------------
*args - Argumentos não nomeados que podem ser usados nas funções.
**kwargs - Argumentos nomeados que podem ser usados nas funções.
---------------------------------------------------------------------------------------------------------
List comprehension é uma forma rápida para criar listas a partir de iteráveis.
---------------------------------------------------------------------------------------------------------
